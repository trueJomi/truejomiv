---
interface Route {
  name: string;
  path: string;
}
import Bars from "@/assets/icons/Bars.astro";
import XIcon from "@/assets/icons/XIcon.astro";
import { Image } from "astro:assets";
import {
  getLangFromUrl,
  useTranslatedPath,
  useTranslations,
} from "@/i18n/utils";

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
const translatePath = useTranslatedPath(lang);

const routes: Route[] = [
  {
    name: t("nav.home"),
    path: translatePath("#home"),
  },
  {
    name: t("nav.about"),
    path: translatePath("#about"),
  },
  {
    name: t("nav.portfolio"),
    path: translatePath("#projects"),
  },
  {
    name: t("nav.education"),
    path: translatePath("#education"),
  },
  {
    name: t("nav.skills"),
    path: translatePath("#skills"),
  },
  {
    name: t("nav.contact"),
    path: translatePath("#contact"),
  },
];
---

<button
  class="menu-button text-main-0 hover:text-main w-10 h-10 fixed p-2 pt-1.5 md:hidden hover:bg-secondary border-main-0 border-2 rounded-xl top-5 right-5 duration-300"
>
  <Bars />
</button>
<nav transition:animate="none" class="md:fixed top-0 left-0 z-50">
  <div
    id="nav-menu"
    class="bg-main-200 md:static fixed top-0 -right-60 h-screen duration-200 w-60 transition-transform z-40 items-center flex justify-center"
  >
    <button
      class="menu-button text-secondary absolute top-2 left-2 w-10 h-10 p-2 md:hidden"
    >
      <XIcon />
    </button>
    <ul class="grid gap-3 font-hurley text-center z-50">
      <li class="mx-auto hidden md:block">
        <picture>
          <Image
            src="/favicon.svg"
            alt="imagen"
            width={100}
            height={100}
            class="h-40 w-40 aspect-square"
          />
        </picture>
      </li>
      {
        routes.map((route) => (
          <li class="w-full text-center">
            <a
              href={route.path}
              class="text-main-0 md:text-base text-xl hover:text-secondary duration-200"
            >
              {route.name}
            </a>
          </li>
        ))
      }
    </ul>
  </div>
  <div
    id="dark-overlay"
    class="fixed md:hidden inset-0 menu-button bg-black opacity-0 pointer-events-none transition-opacity duration-300 z-30"
  >
  </div>
</nav>

<script>
import { getLangFromUrl } from "@/i18n/utils";

  document.addEventListener("astro:page-load", () => {
    const buttons = document.querySelectorAll(".menu-button");
    const items = document.querySelectorAll("#nav-menu ul li a");
    const nav = document.getElementById("nav-menu");
    const overlay = document.getElementById("dark-overlay");
    const sections = document.querySelectorAll("section[id]");
    const lang = getLangFromUrl(new URL(window.location.href));
    let pathadd= "";
    console.log(lang)
    if (lang !== "es") {
      pathadd = `/${lang}`;
    }

    const observerOptions = {
      root: null,
      rootMargin: "-30% 0px -70% 0px", // Ajusta segÃºn necesites
      threshold: 0,
    };

    if (buttons.length === 0 || !nav || !overlay || items.length === 0) {
      throw new Error("Menu button or nav element not found");
    }

    function toggleMenu() {
      if (nav?.classList.contains("-translate-x-60")) {
        document.body.style.overflow = "";
        nav?.classList.remove("-translate-x-60");
        overlay?.classList.remove("opacity-50");
        overlay?.classList.add("pointer-events-none");
      } else {
        document.body.style.overflow = "hidden";
        nav?.classList.add("-translate-x-60");
        overlay?.classList.add("opacity-50");
        overlay?.classList.remove("pointer-events-none");
      }
    }

    buttons.forEach((button) => {
      button.addEventListener("click", toggleMenu);
    });

    items.forEach((item) => {
      item.addEventListener("click", () => {
        document.body.style.overflow = "";
        nav?.classList.remove("-translate-x-60");
        overlay?.classList.remove("opacity-50");
        overlay?.classList.add("pointer-events-none");
      });
    });

    const observer = new IntersectionObserver((entries) => {
      entries.forEach((entrie) => {
        if (entrie.isIntersecting) {
          const sectionId = entrie.target.id;
          items.forEach((item) => {
            item.classList.remove("text-secondary", "font-bold");
            item.classList.add("text-main-0");
          });
          const activeItem = document.querySelector(
            `#nav-menu ul li a[href="${pathadd}#${sectionId}"]`
          );
          if (sectionId === "home") {
            document.querySelector(
              `#nav-menu ul li a[href="${pathadd}/"]`
            )?.classList.add("text-secondary", "font-bold");
          }
          if (activeItem) {
            activeItem.classList.remove("text-main-0");
            activeItem.classList.add("text-secondary", "font-bold");
          }
        }
      });
    }, observerOptions);
    sections.forEach((section) => {
      observer.observe(section);
    });
    return () => {
      observer.disconnect();
    }
  });
</script>
